
DHT11 Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  00000556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000201a  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  000026be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094b  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001641  00000000  00000000  00004347  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  8a:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN13Lcd_4_BitMode10LcdCommandEh>:
	if (row == 0 && pos<16)
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
	LcdString(str);																							/* Call LCD string function */
}
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	96 2f       	mov	r25, r22
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	89 2b       	or	r24, r25
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	c0 98       	cbi	0x18, 0	; 24
  a0:	c1 9a       	sbi	0x18, 1	; 24
  a2:	00 00       	nop
  a4:	c1 98       	cbi	0x18, 1	; 24
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN13Lcd_4_BitMode10LcdCommandEh+0x1c>
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	90 e1       	ldi	r25, 0x10	; 16
  b4:	69 9f       	mul	r22, r25
  b6:	b0 01       	movw	r22, r0
  b8:	11 24       	eor	r1, r1
  ba:	68 2b       	or	r22, r24
  bc:	68 bb       	out	0x18, r22	; 24
  be:	c1 9a       	sbi	0x18, 1	; 24
  c0:	00 00       	nop
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	83 ef       	ldi	r24, 0xF3	; 243
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN13Lcd_4_BitMode10LcdCommandEh+0x3c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <_ZN13Lcd_4_BitMode7LcdCharEh>:
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	96 2f       	mov	r25, r22
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	89 2b       	or	r24, r25
  dc:	88 bb       	out	0x18, r24	; 24
  de:	c0 9a       	sbi	0x18, 0	; 24
  e0:	c1 9a       	sbi	0x18, 1	; 24
  e2:	00 00       	nop
  e4:	c1 98       	cbi	0x18, 1	; 24
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_ZN13Lcd_4_BitMode7LcdCharEh+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN13Lcd_4_BitMode7LcdCharEh+0x1c>
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	90 e1       	ldi	r25, 0x10	; 16
  f4:	69 9f       	mul	r22, r25
  f6:	b0 01       	movw	r22, r0
  f8:	11 24       	eor	r1, r1
  fa:	68 2b       	or	r22, r24
  fc:	68 bb       	out	0x18, r22	; 24
  fe:	c1 9a       	sbi	0x18, 1	; 24
 100:	00 00       	nop
 102:	c1 98       	cbi	0x18, 1	; 24
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_ZN13Lcd_4_BitMode7LcdCharEh+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN13Lcd_4_BitMode7LcdCharEh+0x3c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <_ZN13Lcd_4_BitMode7LcdInitEv>:
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <_ZN13Lcd_4_BitMode7LcdInitEv+0xe>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN13Lcd_4_BitMode7LcdInitEv+0x14>
 126:	00 00       	nop
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	ce 01       	movw	r24, r28
 12c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 130:	68 e2       	ldi	r22, 0x28	; 40
 132:	ce 01       	movw	r24, r28
 134:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 138:	6c e0       	ldi	r22, 0x0C	; 12
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 140:	66 e0       	ldi	r22, 0x06	; 6
 142:	ce 01       	movw	r24, r28
 144:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_ZN13Lcd_4_BitMode7LcdInitEv+0x42>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZN13Lcd_4_BitMode7LcdInitEv+0x48>
 15a:	00 00       	nop
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <_ZN13Lcd_4_BitMode9LcdStringEPc>:
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	eb 01       	movw	r28, r22
 170:	68 81       	ld	r22, Y
 172:	66 23       	and	r22, r22
 174:	69 f0       	breq	.+26     	; 0x190 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x2e>
 176:	7c 01       	movw	r14, r24
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	c7 01       	movw	r24, r14
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
 188:	69 91       	ld	r22, Y+
 18a:	61 11       	cpse	r22, r1
 18c:	f8 cf       	rjmp	.-16     	; 0x17e <_ZN13Lcd_4_BitMode9LcdStringEPc+0x1c>
 18e:	02 c0       	rjmp	.+4      	; 0x194 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x32>
 190:	00 e0       	ldi	r16, 0x00	; 0
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	80 2f       	mov	r24, r16
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	a1 97       	sbiw	r28, 0x21	; 33
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	8c 01       	movw	r16, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x2c>
 1c4:	98 f0       	brcs	.+38     	; 0x1ec <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x48>
 1c6:	42 30       	cpi	r20, 0x02	; 2
 1c8:	51 f0       	breq	.+20     	; 0x1de <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x3a>
 1ca:	43 30       	cpi	r20, 0x03	; 3
 1cc:	b1 f0       	breq	.+44     	; 0x1fa <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x56>
 1ce:	20 c0       	rjmp	.+64     	; 0x210 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 1d0:	42 e0       	ldi	r20, 0x02	; 2
 1d2:	be 01       	movw	r22, r28
 1d4:	6f 5f       	subi	r22, 0xFF	; 255
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 1de:	48 e0       	ldi	r20, 0x08	; 8
 1e0:	be 01       	movw	r22, r28
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 1ec:	4a e0       	ldi	r20, 0x0A	; 10
 1ee:	be 01       	movw	r22, r28
 1f0:	6f 5f       	subi	r22, 0xFF	; 255
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
 1f8:	0b c0       	rjmp	.+22     	; 0x210 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 1fa:	40 e1       	ldi	r20, 0x10	; 16
 1fc:	be 01       	movw	r22, r28
 1fe:	6f 5f       	subi	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	0e 94 1a 02 	call	0x434	; 0x434 <__itoa_ncheck>
 206:	60 e6       	ldi	r22, 0x60	; 96
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 210:	be 01       	movw	r22, r28
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	7f 4f       	sbci	r23, 0xFF	; 255
 216:	c8 01       	movw	r24, r16
 218:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 21c:	a1 96       	adiw	r28, 0x21	; 33
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>:

void Lcd_4_BitMode::LcdGoXy (unsigned char row,unsigned char pos)
{
	if (row == 0 && pos<16)
 232:	61 11       	cpse	r22, r1
 234:	08 c0       	rjmp	.+16     	; 0x246 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x14>
 236:	40 31       	cpi	r20, 0x10	; 16
 238:	78 f4       	brcc	.+30     	; 0x258 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
 23a:	4f 70       	andi	r20, 0x0F	; 15
 23c:	64 2f       	mov	r22, r20
 23e:	60 68       	ori	r22, 0x80	; 128
 240:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 244:	08 95       	ret
	else if (row == 1 && pos<16)
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	39 f4       	brne	.+14     	; 0x258 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
 24a:	40 31       	cpi	r20, 0x10	; 16
 24c:	28 f4       	brcc	.+10     	; 0x258 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
 24e:	4f 70       	andi	r20, 0x0F	; 15
 250:	64 2f       	mov	r22, r20
 252:	60 6c       	ori	r22, 0xC0	; 192
 254:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 258:	08 95       	ret

0000025a <_ZN13Lcd_4_BitMode8LcdClearEv>:
}

void Lcd_4_BitMode::LcdClear()
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
	LcdCommand (0x01);																						/* Clear display */
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	83 ef       	ldi	r24, 0xF3	; 243
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <_ZN13Lcd_4_BitMode8LcdClearEv+0x10>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <_ZN13Lcd_4_BitMode8LcdClearEv+0x16>
 270:	00 00       	nop
	_delay_ms(2);
	LcdCommand (0x80);																						/* Cursor at home position */
 272:	60 e8       	ldi	r22, 0x80	; 128
 274:	ce 01       	movw	r24, r28
 276:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <_Z7Requestv>:

uint8_t c = 0, I_RH, D_RH, I_Temp, D_Temp, CheckSum;

void Request()																	/* MicroController send start pulse/request */
{
	DDRD |= (1 << DHT11Pin);
 280:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1 << DHT11Pin);													/* set to low pin */
 282:	96 98       	cbi	0x12, 6	; 18
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	9c e9       	ldi	r25, 0x9C	; 156
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <_Z7Requestv+0x8>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <_Z7Requestv+0xe>
 28e:	00 00       	nop
	_delay_ms(20);																/* wait for 20ms */
	PORTD |= (1 << DHT11Pin);													/* set to high pin */
 290:	96 9a       	sbi	0x12, 6	; 18
 292:	08 95       	ret

00000294 <_Z8Responsev>:
}

void Response()																	/* receive response from DHT11 */
{
	DDRD &= ~(1 << DHT11Pin);
 294:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1 << DHT11Pin));
 296:	86 99       	sbic	0x10, 6	; 16
 298:	fe cf       	rjmp	.-4      	; 0x296 <_Z8Responsev+0x2>
	while((PIND & (1 << DHT11Pin)) == 0);
 29a:	86 9b       	sbis	0x10, 6	; 16
 29c:	fe cf       	rjmp	.-4      	; 0x29a <_Z8Responsev+0x6>
	while(PIND & (1 << DHT11Pin));
 29e:	86 99       	sbic	0x10, 6	; 16
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <_Z8Responsev+0xa>
}
 2a2:	08 95       	ret

000002a4 <_Z12Receive_datav>:

uint8_t Receive_data()															/* receive data */
{
 2a4:	88 e0       	ldi	r24, 0x08	; 8
	for (uint8_t q = 0; q < 8; q++)
	{
		while((PIND & (1 << DHT11Pin)) == 0);									/* check received bit 0 or 1 */
 2a6:	86 9b       	sbis	0x10, 6	; 16
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <_Z12Receive_datav+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	90 e5       	ldi	r25, 0x50	; 80
 2ac:	9a 95       	dec	r25
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <_Z12Receive_datav+0x8>
		_delay_us(30);
		if(PIND & (1 << DHT11Pin))												/* if high pulse is greater than 30ms */
 2b0:	86 9b       	sbis	0x10, 6	; 16
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <_Z12Receive_datav+0x1e>
		{
			c = (c << 1)|(0x01);												/* then its logic HIGH */
 2b4:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <c>
 2b8:	99 0f       	add	r25, r25
 2ba:	91 60       	ori	r25, 0x01	; 1
 2bc:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <c>
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <_Z12Receive_datav+0x28>
		}
		else																	/* otherwise its logic LOW */
		{
			c = (c << 1);	
 2c2:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <c>
 2c6:	99 0f       	add	r25, r25
 2c8:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <c>
		}
		
		while(PIND & (1 << DHT11Pin));
 2cc:	86 99       	sbic	0x10, 6	; 16
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <_Z12Receive_datav+0x28>
 2d0:	81 50       	subi	r24, 0x01	; 1
	while(PIND & (1 << DHT11Pin));
}

uint8_t Receive_data()															/* receive data */
{
	for (uint8_t q = 0; q < 8; q++)
 2d2:	49 f7       	brne	.-46     	; 0x2a6 <_Z12Receive_datav+0x2>
		}
		
		while(PIND & (1 << DHT11Pin));
	}
	return c;
}
 2d4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <c>
 2d8:	08 95       	ret

000002da <main>:

Lcd_4_BitMode lcd;

int main(void)
{
	lcd.LcdInit();																				// Initialize LCD
 2da:	80 e8       	ldi	r24, 0x80	; 128
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 89 00 	call	0x112	; 0x112 <_ZN13Lcd_4_BitMode7LcdInitEv>
	lcd.LcdClear();																				// Clear LCD
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN13Lcd_4_BitMode8LcdClearEv>
	lcd.LcdGoXy(0,0);																			// Enter column and row position
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
	lcd.LcdString("Humidity = ");
 2f6:	63 e6       	ldi	r22, 0x63	; 99
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e8       	ldi	r24, 0x80	; 128
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
	lcd.LcdGoXy(1,0);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
	lcd.LcdString("Temp = ");
 30e:	6f e6       	ldi	r22, 0x6F	; 111
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	80 e8       	ldi	r24, 0x80	; 128
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>

	while(1)
	{
		Request();																				// send start pulse
 31a:	0e 94 40 01 	call	0x280	; 0x280 <_Z7Requestv>
		Response();																				// receive response
 31e:	0e 94 4a 01 	call	0x294	; 0x294 <_Z8Responsev>
		I_RH = Receive_data();																	// store first eight bit in I_RH
 322:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12Receive_datav>
 326:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <I_RH>
		D_RH = Receive_data();																	// store next eight bit in D_RH
 32a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12Receive_datav>
 32e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <D_RH>
		I_Temp = Receive_data();																// store next eight bit in I_Temp
 332:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12Receive_datav>
 336:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <I_Temp>
		D_Temp = Receive_data();																// store next eight bit in D_Temp
 33a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12Receive_datav>
 33e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <D_Temp>
		CheckSum = Receive_data();																// store next eight bit in CheckSum
 342:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_Z12Receive_datav>
 346:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <CheckSum>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 34a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <I_RH>
 34e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <D_RH>
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	29 0f       	add	r18, r25
 356:	31 1d       	adc	r19, r1
 358:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <I_Temp>
 35c:	29 0f       	add	r18, r25
 35e:	31 1d       	adc	r19, r1
 360:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <D_Temp>
 364:	29 0f       	add	r18, r25
 366:	31 1d       	adc	r19, r1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	28 17       	cp	r18, r24
 36c:	39 07       	cpc	r19, r25
 36e:	69 f0       	breq	.+26     	; 0x38a <main+0xb0>
		{
			lcd.LcdGoXy(0, 0);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
			lcd.LcdString("Error");
 37c:	67 e7       	ldi	r22, 0x77	; 119
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	80 e8       	ldi	r24, 0x80	; 128
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 388:	4e c0       	rjmp	.+156    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		}

		else
		{
			lcd.LcdGoXy(0, 11);
 38a:	4b e0       	ldi	r20, 0x0B	; 11
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
			lcd.LcdNum(I_RH, decimal);
 396:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <I_RH>
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>
			lcd.LcdChar('.');
 3a6:	6e e2       	ldi	r22, 0x2E	; 46
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
			
			lcd.LcdNum(D_RH, decimal);
 3b0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <D_RH>
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	80 e8       	ldi	r24, 0x80	; 128
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>
			lcd.LcdChar('%');
 3c0:	65 e2       	ldi	r22, 0x25	; 37
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>

			lcd.LcdGoXy(1, 6);
 3ca:	46 e0       	ldi	r20, 0x06	; 6
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	80 e8       	ldi	r24, 0x80	; 128
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 19 01 	call	0x232	; 0x232 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
			lcd.LcdNum(I_Temp, decimal);
 3d6:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <I_Temp>
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>
			lcd.LcdChar('.');
 3e6:	6e e2       	ldi	r22, 0x2E	; 46
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
			
			lcd.LcdNum(D_Temp, decimal);
 3f0:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <D_Temp>
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>
			//lcddata(0xDF);
			lcd.LcdString("C ");
 400:	6d e7       	ldi	r22, 0x7D	; 125
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
			
			lcd.LcdNum(CheckSum, decimal);
 40c:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <CheckSum>
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>
			lcd.LcdChar(' ');
 41c:	60 e2       	ldi	r22, 0x20	; 32
 41e:	80 e8       	ldi	r24, 0x80	; 128
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 426:	8f e1       	ldi	r24, 0x1F	; 31
 428:	9e e4       	ldi	r25, 0x4E	; 78
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	73 cf       	rjmp	.-282    	; 0x31a <main+0x40>

00000434 <__itoa_ncheck>:
 434:	bb 27       	eor	r27, r27
 436:	4a 30       	cpi	r20, 0x0A	; 10
 438:	31 f4       	brne	.+12     	; 0x446 <__itoa_ncheck+0x12>
 43a:	99 23       	and	r25, r25
 43c:	22 f4       	brpl	.+8      	; 0x446 <__itoa_ncheck+0x12>
 43e:	bd e2       	ldi	r27, 0x2D	; 45
 440:	90 95       	com	r25
 442:	81 95       	neg	r24
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	0c 94 26 02 	jmp	0x44c	; 0x44c <__utoa_common>

0000044a <__utoa_ncheck>:
 44a:	bb 27       	eor	r27, r27

0000044c <__utoa_common>:
 44c:	fb 01       	movw	r30, r22
 44e:	55 27       	eor	r21, r21
 450:	aa 27       	eor	r26, r26
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	aa 1f       	adc	r26, r26
 458:	a4 17       	cp	r26, r20
 45a:	10 f0       	brcs	.+4      	; 0x460 <__utoa_common+0x14>
 45c:	a4 1b       	sub	r26, r20
 45e:	83 95       	inc	r24
 460:	50 51       	subi	r21, 0x10	; 16
 462:	b9 f7       	brne	.-18     	; 0x452 <__utoa_common+0x6>
 464:	a0 5d       	subi	r26, 0xD0	; 208
 466:	aa 33       	cpi	r26, 0x3A	; 58
 468:	08 f0       	brcs	.+2      	; 0x46c <__utoa_common+0x20>
 46a:	a9 5d       	subi	r26, 0xD9	; 217
 46c:	a1 93       	st	Z+, r26
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	79 f7       	brne	.-34     	; 0x450 <__utoa_common+0x4>
 472:	b1 11       	cpse	r27, r1
 474:	b1 93       	st	Z+, r27
 476:	11 92       	st	Z+, r1
 478:	cb 01       	movw	r24, r22
 47a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <strrev>

0000047e <strrev>:
 47e:	dc 01       	movw	r26, r24
 480:	fc 01       	movw	r30, r24
 482:	67 2f       	mov	r22, r23
 484:	71 91       	ld	r23, Z+
 486:	77 23       	and	r23, r23
 488:	e1 f7       	brne	.-8      	; 0x482 <strrev+0x4>
 48a:	32 97       	sbiw	r30, 0x02	; 2
 48c:	04 c0       	rjmp	.+8      	; 0x496 <strrev+0x18>
 48e:	7c 91       	ld	r23, X
 490:	6d 93       	st	X+, r22
 492:	70 83       	st	Z, r23
 494:	62 91       	ld	r22, -Z
 496:	ae 17       	cp	r26, r30
 498:	bf 07       	cpc	r27, r31
 49a:	c8 f3       	brcs	.-14     	; 0x48e <strrev+0x10>
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
